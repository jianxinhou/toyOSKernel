;===================================================================================
; 函数名        ：      DispAL
; 功能          ：      显示 AL 中的数字
; 
;-----------------------------------------------------------------------------------
DispAL:
;-----------------------------------------------------------------------------------
; 保存寄存器的值
    push ecx
    push edx
    push edi
;-----------------------------------------------------------------------------------
    mov edi, [dwDispPos]        ; 将当前显示位置放入edi

    mov ah, 0Fh                 ; 字体颜色
    mov dl, al                  ; 备份数据到dl中 
    shr al, 4                   ; 取高4位数据
    mov ecx, 2                  ; 分别显示高4位和低4位，共循环两次
.begin: 
    and al,01111b               ; 取被显示的数据
    cmp al, 9                   ; 判断al是否大于9
    ja .1                       
    add al, '0'                 ; 计算十以下数字应该显示的ASCII码
    jmp .2
.1:
    sub al, 0Ah                 
    add al, 'A'                 ; 计算十以上数字应该显示的ASCII码   
.2:
    mov [gs:di], ax             ; 向当前显示位置处输出数字
    add edi, 2                  ; 显示位置向后增加

    mov al, dl                  ; 恢复AL
    loop .begin                 ; 继续输出低位数据

    mov [dwDispPos], edi        ; 保存显示位置
;-----------------------------------------------------------------------------------
; 恢复寄存器的值   
    pop edi
    pop edx
    pop ecx

    ret
;===================================================================================

;===================================================================================
; 函数名        ：      DispInt
; 功能          ：      以16进制显示一个整型数
; 
;-----------------------------------------------------------------------------------
DispInt:
;-----------------------------------------------------------------------------------
; 显示最高字节
    mov eax, [esp + 4]          ; 由于是短调用，因此栈顶指针指向call前的eip，所以要+4
    shr eax, 24                 

    call DispAL
;-----------------------------------------------------------------------------------
; 显示第二个字节
    mov eax, [esp + 4]
    shr eax, 16
    call DispAL
;-----------------------------------------------------------------------------------
; 显示第三个字节
    mov eax, [esp + 4]
    shr eax, 8
    call DispAL
;-----------------------------------------------------------------------------------
; 显示最低字节
    mov eax, [esp + 4]
    call DispAL
;-----------------------------------------------------------------------------------
; 显示h后缀和空格
    mov ah, 07h
    mov al, 'h'
    push edi                    ; 保存edi的值
    mov edi, [dwDispPos]        ; 将当前显显示位置对应的显存地址放入edi
    mov [gs:edi], ax            ; 向edi指向的显存写入ax
    add edi,4                   ; 将当前显示位置置为下一个数字的位置
    mov [dwDispPos], edi        ; 保存当前显示位置
    pop edi

    ret
;===================================================================================

;===================================================================================
; 函数名        ：      DispStr
; 功能          ：      显示字符串
; 
;-----------------------------------------------------------------------------------
DispStr:
;-----------------------------------------------------------------------------------
; 保存寄存器的值
    push ebp
    mov ebp, esp
    push ebx
    push esi
    push edi
;-----------------------------------------------------------------------------------
; 显示字符的准备工作
    mov esi, [ebp + 8]          ; 将要显示的字符串地址放入esi
    mov edi, [dwDispPos]        ; 将当前显示位置对应的显存放入edi
    mov ah, 0Fh                 ; 字符颜色          
;-----------------------------------------------------------------------------------
; 判断是否读至字符串末尾，读至末尾则函数结束    
.1:
    lodsb                       ; 将字符读入ax
    test al, al                 ; 判断是否读至字符串末尾
    jz .2                       ; 读至末尾则跳转至.2处，即函数结束处
;-----------------------------------------------------------------------------------
; 判断字符是否为回车，若字符为回车时，计算下一行起始处的位置    
    cmp al, 0Ah                 ; 判断当前字符是否为回车
    jnz .3                      ; 不为回车则跳转至.3处，即直接输出字符
    push eax                    ; 保存eax
    mov eax, edi                ; 保存当前显示位置
    mov bl, 160                 ; 除数
    div bl
    and eax, 0FFh               ; al为商，即当前显示位置位于第几行
    inc eax                     ; 增加一行        
    mov bl, 160                 ; 乘数
    mul bl                      ; 计算下一行的起始位置，这一位置即为换行后的位置
    mov edi, eax                ; 将此位置放入edi
    pop eax                     ; 恢复eax
    jmp .1
;-----------------------------------------------------------------------------------
; 直接显示字符
.3:
    mov [gs:edi],ax
    add edi, 2
    jmp .1
;-----------------------------------------------------------------------------------
; 函数结束
.2:
    mov [dwDispPos], edi
;-----------------------------------------------------------------------------------
; 恢复寄存器的值
    pop edi
    pop esi
    pop ebx
    pop ebp
    ret
;===================================================================================

;===================================================================================
; 函数名        ：      DispReturn
; 功能          ：      换行
;-----------------------------------------------------------------------------------
DispReturn:
;-----------------------------------------------------------------------------------
	push	szReturn
	call	DispStr			; printf("\n");
	add	esp, 4
	ret

; DispReturn 结束
;===================================================================================


;===================================================================================
; 函数名        ：      MemCpy
; 功能          ：      void* MemCpy(void* es:pDest, void* ds:pSrc, int iSize)
;-----------------------------------------------------------------------------------
MemCpy:
;-----------------------------------------------------------------------------------
; 保存寄存器的值
    push ebp               
    mov ebp, esp            ; 保存esp当前的地址，方便取参数
    push esi
    push edi
    push ecx
;-----------------------------------------------------------------------------------
; 拷贝数据
; 
    mov edi, [ebp + 8]      ; 取参数
    mov esi, [ebp + 12]
    mov ecx, [ebp + 16]

.1:
    cmp ecx, 0              ; 比较iSize，判断是否为0
    jz .2

    mov al, [ds:esi]        ; 从内存中取一个字节到寄存器
    inc esi

    mov [es:edi], al        ; 将寄存器中的数据存到内存中
    inc edi

    dec ecx                 ; 表示已经存储完一个字节
    jmp .1
.2:
    mov eax, [ebp + 8]      ; 返回值 = 目标内存起始地址
;-----------------------------------------------------------------------------------
; 恢复寄存器的值
    pop ecx
    pop edi
    pop esi
    mov esp, ebp
    pop ebp
	ret
; Memcpy 结束
;===================================================================================